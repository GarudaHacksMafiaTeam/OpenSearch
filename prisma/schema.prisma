// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}


model User {
  id                  Int       @default(autoincrement()) @id
  email               String?   @unique
  name                String?
  image               String?
  emailVerified       DateTime? @map(name: "email_verified")
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @map(name: "updated_at")
  profile             UserProfile?
  comments            Comment[]
  commentsToComment   CommentToComment[]
  tasksAccessible     Task[]         
  taskCards           TaskCard[]         
  commentsToCards     TaskCardComment[]     
  accessToOpenSources AccessToOpenSource[] 
  taskChatMessages    TaskChatMessage[]
  reactions           Reaction[]
  notifications        Notification[]

  @@map(name: "users")
}

model UserProfile {
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     @unique
  description   String? 
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model OpenSource {
  id            Int      @default(autoincrement()) @id
  profile       OpenSourceProfile?
  userAccesses  AccessToOpenSource[] 
  feeds         Feed[]
  tasks         Task[]
}

model OpenSourceProfile {
  id            Int      @default(autoincrement()) @id
  openSource    OpenSource @relation(fields: [openSourceId], references: [id])
  openSourceId  Int     @unique
  name          String?
  image         String?
  description   String? 
}

enum Role {
  OWNER
  CONTRIBUTOR
}

model AccessToOpenSource {
  id            Int      @default(autoincrement()) @id
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     
  openSource    OpenSource  @relation(fields: [openSourceId], references: [id])
  openSourceId  Int   
  role          Role        @default(CONTRIBUTOR)
}

model Task {
  id            Int      @default(autoincrement()) @id
  openSource    OpenSource  @relation(fields: [openSourceId], references: [id])
  openSourceId  Int   
  title         String
  description   String
  contributors  User[]
  cards         TaskCard[]
  chatMessages  TaskChatMessage[]
}

enum Progress {
  NEW
  READY
  ONGOING
  DONE
}

model TaskCard {
  id            Int      @default(autoincrement()) @id
  task          Task     @relation(fields: [taskId], references: [id])
  taskId        Int   
  asignee       User    @relation(fields: [asigneeId], references: [id])
  asigneeId     Int     
  createdAt     DateTime   @default(now())
  title         String
  description   String
  progress      Progress
  comments      TaskCardComment[]
}

model TaskCardComment {
  id            Int      @default(autoincrement()) @id
  taskCard      TaskCard     @relation(fields: [taskCardId], references: [id])
  taskCardId    Int   
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     
  content       String
}

model TaskChatMessage {
  id            Int      @default(autoincrement()) @id
  task          Task     @relation(fields: [taskId], references: [id])
  taskId        Int   
  user          User    @relation(fields: [userId], references: [id])
  userId        Int     
  createdAt     DateTime   @default(now())
  content       String
}

model Feed {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  title         String
  content       String
  published     Boolean    @default(false)
  openSource    OpenSource @relation(fields: [openSourceId], references: [id])
  openSourceId  Int
  comments      Comment[]
  reactions     Reaction[]
}

model Comment {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  content    String
  feed       Feed       @relation(fields: [feedId], references: [id])
  feedId     Int
  user       User       @relation(fields: [userId], references: [id])
  userId     Int 
  comments   CommentToComment[]
}

model CommentToComment {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  content         String
  firstComment    Comment @relation(fields: [firstCommentId], references: [id])
  firstCommentId  Int
  user            User       @relation(fields: [userId], references: [id])
  userId          Int 
}

model Reaction {
  id              Int        @id @default(autoincrement())
  feed            Feed       @relation(fields: [feedId], references: [id])
  feedId          Int
  user            User       @relation(fields: [userId], references: [id])
  userId          Int 
}


model Notification {
  id              Int        @id @default(autoincrement())
  user            User       @relation(fields: [userId], references: [id])
  userId          Int 
  createdAt       DateTime   @default(now())
  content         String
  link            String
  read            Boolean    @default(false)
}